/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.gaodemap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.view.ViewGroup.LayoutParams;
import android.widget.LinearLayout;
import android.os.Bundle;

import com.amap.api.maps.AMap;
import com.amap.api.maps.MapView;
import com.amap.api.maps.MapsInitializer;

import com.amap.api.maps.model.BitmapDescriptorFactory;
import com.amap.api.maps.model.LatLng;
import com.amap.api.maps.model.Marker;
import com.amap.api.maps.model.MarkerOptions;

import com.amap.api.maps.AMap.OnMarkerClickListener;

import java.util.*;

// This proxy can be created by calling Gaodemap.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=GaodemapModule.class)
public class MapProxy extends TiViewProxy
    implements OnMarkerClickListener {
	// Standard Debugging variables
	private static final String LCAT = "MapProxy";
	private static final boolean DBG = TiConfig.LOGD;
  private MapView map_view ;
  private AMap a_map;
  private List<Marker> markers = new ArrayList<Marker>();
  private List<Map> marker_parameters = new ArrayList<Map>();

	private class ExampleView extends TiUIView
	{
		public ExampleView(TiViewProxy proxy) {
      super(proxy);

      LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
      LinearLayout holder = new LinearLayout(proxy.getActivity());
      holder.setLayoutParams(lp);

      map_view = new MapView(proxy.getActivity());

      holder.addView(map_view);

      setNativeView(holder);
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}

	// Constructor
	public MapProxy()
	{
		super();
    Log.i(LCAT, "== in MapProxy(), " + this );
	}

	@Override
	public TiUIView createView(Activity activity)
	{
    Log.i(LCAT, "== in createView");
		TiUIView view = new ExampleView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
    if(a_map == null){
      a_map = map_view.getMap();
      a_map.setOnMarkerClickListener(this);
      //add_markers(39.9, 116.47);
      //add_markers(39.92, 116.49);
    }
		return view;
	}

  @Kroll.method
  public void create_marker(Map options){
    Log.i(LCAT, "== in create_marker, options: " + options.toString() );
    Log.i(LCAT, "== a_map is: " + a_map);
    Log.i(LCAT, "== this proxy is: " + this);

    Marker marker = a_map.addMarker(
        new MarkerOptions()
          .title((String)options.get("title"))
          .snippet((String)options.get("snippet"))
          .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))
          .draggable(false)
    );
    marker.setPosition(new LatLng(
          TiConvert.toDouble(options.get("latitude")),
          TiConvert.toDouble(options.get("longitude"))
    ));
    marker.setObject(options.get("extra_data"));
    Log.i(LCAT, "== marker.extra_data: " + marker.getObject());
    //marker.showInfoWindow();
    markers.add(marker);
  }

  @Override
  public void onCreate(Activity activity, Bundle savedInstanceState) {
    Log.i(LCAT, "== in onCreate in proxy");
    map_view.onCreate(savedInstanceState);
  }

  @Override
  public boolean onMarkerClick(final Marker marker){
    for(Marker temp_marker : markers){
      temp_marker.hideInfoWindow();
    }

    HashMap<String, Object> event = new HashMap<String, Object>();
    event.put("id", marker.getObject());
    this.fireEvent("marker_clicked", event);

    Log.i(LCAT, "=== marker clicked fired in java");
    return false;
  }



	// 这里设置 创建时需要的各种参数。
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		if (options.containsKey("message")) {
			Log.i(LCAT, "example created with message: " + options.get("message"));
		}
	}

	// Methods
	@Kroll.method
	public void printMessage(String message)
	{
		Log.i(LCAT, "printing message: " + message);
	}


	@Kroll.getProperty @Kroll.method
	public String getMessage()
	{
        return "Hello World from my module";
	}

	@Kroll.setProperty @Kroll.method
	public void setMessage(String message)
	{
	    Log.i(LCAT, "Tried setting module message to: " + message);
	}
}
